[{"D:\\work_tms\\JS-React\\match-match-game\\src\\index.js":"1","D:\\work_tms\\JS-React\\match-match-game\\src\\App.js":"2","D:\\work_tms\\JS-React\\match-match-game\\src\\components\\WelcomePg.jsx":"3","D:\\work_tms\\JS-React\\match-match-game\\src\\components\\GamePg.jsx":"4","D:\\work_tms\\JS-React\\match-match-game\\src\\components\\ProfilePg.jsx":"5","D:\\work_tms\\JS-React\\match-match-game\\src\\components\\RecordsPg.jsx":"6","D:\\work_tms\\JS-React\\match-match-game\\src\\components\\CongratulationPg.jsx":"7","D:\\work_tms\\JS-React\\match-match-game\\src\\validations\\profileValidation.js":"8","D:\\work_tms\\JS-React\\match-match-game\\src\\arrsOfImages\\countries.js":"9","D:\\work_tms\\JS-React\\match-match-game\\src\\arrsOfImages\\balls.js":"10","D:\\work_tms\\JS-React\\match-match-game\\src\\arrsOfImages\\food.js":"11"},{"size":286,"mtime":1612905797921,"results":"12","hashOfConfig":"13"},{"size":869,"mtime":1613040708564,"results":"14","hashOfConfig":"13"},{"size":8763,"mtime":1612983461317,"results":"15","hashOfConfig":"13"},{"size":11986,"mtime":1613050890310,"results":"16","hashOfConfig":"13"},{"size":2365,"mtime":1612989386794,"results":"17","hashOfConfig":"13"},{"size":0,"mtime":1612266426159,"results":"18","hashOfConfig":"13"},{"size":1584,"mtime":1613054119110,"results":"19","hashOfConfig":"13"},{"size":428,"mtime":1612621122273,"results":"20","hashOfConfig":"13"},{"size":4731,"mtime":1612946696876,"results":"21","hashOfConfig":"13"},{"size":4998,"mtime":1613077001726,"results":"22","hashOfConfig":"13"},{"size":4512,"mtime":1612949590732,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1uc3wg2",{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\work_tms\\JS-React\\match-match-game\\src\\index.js",[],["51","52"],"D:\\work_tms\\JS-React\\match-match-game\\src\\App.js",["53","54","55"],"import React, { useEffect, useHistory } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport WelcomePg from './components/WelcomePg';\nimport GamePg from './components/GamePg';\nimport ProfilePg from './components/ProfilePg';\nimport CongratulationPg from './components/CongratulationPg';\nimport RecordsPg from './components/RecordsPg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={WelcomePg}></Route>\n        <Route path=\"/welcome\" component={WelcomePg}></Route>\n        <Route path=\"/game\" component={GamePg}></Route>\n        <Route path=\"/profile\" component={ProfilePg}></Route>\n        <Route path=\"/congratulations\" component={CongratulationPg}></Route>\n        <Route path=\"/records\"></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","D:\\work_tms\\JS-React\\match-match-game\\src\\components\\WelcomePg.jsx",[],"D:\\work_tms\\JS-React\\match-match-game\\src\\components\\GamePg.jsx",["56","57","58","59"],"import React, { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport puzzleImg from \"../img/puzzle.png\";\r\nimport backImg from \"../img/back-arrow.png\";\r\nimport userImg from \"../img/user.png\";\r\nimport logOutImg from \"../img/log-out.png\";\r\nimport cornerImg from \"../img/card/back/corner.png\";\r\nimport questionImg from \"../img/card/back/question.png\";\r\nimport { ballsEasyArrPaired, ballsMediumArrPaired, ballsHardArrPaired } from \"../arrsOfImages/balls\";\r\nimport { countriesEasyArrPaired, countriesMediumArrPaired, countriesHardArrPaired } from \"../arrsOfImages/countries\";\r\nimport { foodEasyArrPaired, foodMediumArrPaired, foodHardArrPaired } from \"../arrsOfImages/food\";\r\nimport \"../style/GamePg.css\";\r\nimport \"../App.css\";\r\n\r\nexport default function GameGg(props) {\r\n    const history = useHistory();\r\n\r\n    const [time, setTime] = useState({ sec: 0, min: 0 });\r\n    const [intervalID, setIntervalD] = useState(null);\r\n    const [steps, setSteps] = useState(0);\r\n    const [cards, setCards] = useState([]);\r\n    const [openedCards, setOpenedCards] = useState([]);\r\n    const [matchedCards, setMatchedCards] = useState([]);\r\n\r\n    const gameContainer = useRef();\r\n    const card = useRef();\r\n\r\n    let secCount = time.sec;\r\n    let minCount = time.min;\r\n\r\n    const stopTimer = useCallback(() => {\r\n        if (intervalID) {\r\n            clearInterval(intervalID);\r\n            setIntervalD(null);\r\n        }\r\n    }, [intervalID]);\r\n\r\n    const onRestartClick = useCallback(() => {\r\n        const isConfirmed = window.confirm(`Are you sure that you want to restart the game?\\n\\nNOTE: Your current score will not be saved.`);\r\n        if (isConfirmed) {\r\n            setTime({ min: 0, sec: 0 });\r\n            setSteps(0);\r\n            setMatchedCards([]);\r\n            setOpenedCards([]);\r\n            setCards(shuffle(setCardsArray()));\r\n        }\r\n    }, [setTime]);\r\n\r\n    const onCardFlipHandler = (index) => {\r\n        setOpenedCards([...openedCards, index]);\r\n    }\r\n\r\n    const { difficulty, cardType } = JSON.parse(localStorage.getItem('gameInfo'));\r\n\r\n    const setCardsArray = () => {\r\n        switch (cardType) {\r\n            case 'countries': {\r\n                if (difficulty === 'easy') return countriesEasyArrPaired;\r\n                if (difficulty === 'medium') return countriesMediumArrPaired;\r\n                if (difficulty === 'hard') return countriesHardArrPaired;\r\n                break;\r\n            }\r\n            case 'food': {\r\n                if (difficulty === 'easy') return foodEasyArrPaired;\r\n                if (difficulty === 'medium') return foodMediumArrPaired;\r\n                if (difficulty === 'hard') return foodHardArrPaired;\r\n                break;\r\n            }\r\n            case 'balls': {\r\n                if (difficulty === 'easy') return ballsEasyArrPaired;\r\n                if (difficulty === 'medium') return ballsMediumArrPaired;\r\n                if (difficulty === 'hard') return ballsHardArrPaired;\r\n                break;\r\n            }\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    const shuffle = (array) => {\r\n        return array.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const tick = () => {\r\n            secCount++;\r\n\r\n            if (secCount === 60) {\r\n                minCount++;\r\n                secCount = 0;\r\n            }\r\n\r\n            setTime({ sec: secCount, min: minCount });\r\n        };\r\n\r\n        const intID = setInterval(tick, 1000);\r\n        setIntervalD(intID);\r\n\r\n        return () => clearInterval(intID);\r\n    }, [time]);\r\n\r\n    useEffect(() => {\r\n        const firstOpenedCard = setCardsArray()[openedCards[0]];\r\n\r\n        if (firstOpenedCard) {\r\n            const secondOpenedCard = setCardsArray()[openedCards[1]];\r\n\r\n            if (secondOpenedCard && firstOpenedCard.id === secondOpenedCard.id) {\r\n                setMatchedCards([...matchedCards, secondOpenedCard.id]);\r\n\r\n                if (matchedCards.length + 1 === cards.length / 2) {\r\n                    stopTimer();\r\n\r\n                    const { firstName, lastName } = JSON.parse(localStorage.getItem('profileInfo'));\r\n                    const finishedGamesInfo = JSON.parse(localStorage.getItem('finishedGamesInfo'));\r\n\r\n                    const gameInfo = {\r\n                        firstName,\r\n                        lastName,\r\n                        difficulty,\r\n                        duration: time,\r\n                        steps: steps + 1\r\n                    }\r\n\r\n                    console.log(\"Game info: \", gameInfo);\r\n\r\n                    if (finishedGamesInfo !== null) {\r\n                        finishedGamesInfo.push(gameInfo);\r\n                        localStorage.setItem('finishedGamesInfo', JSON.stringify(finishedGamesInfo));\r\n                    } else {\r\n                        const newArrOfFinishedGames = [];\r\n                        newArrOfFinishedGames.push(gameInfo);\r\n                        localStorage.setItem('finishedGamesInfo', JSON.stringify(newArrOfFinishedGames));\r\n                    }\r\n\r\n                    console.log(\"Finished games: \", finishedGamesInfo);\r\n\r\n                    setTimeout(() => history.push('/congratulations'), 1250);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (openedCards.length === 2) {\r\n            setSteps(steps + 1);\r\n            gameContainer.current.classList.add('disabled');\r\n\r\n            setTimeout(() => {\r\n                setOpenedCards([]);\r\n                gameContainer.current.classList.remove('disabled');\r\n                card.current.classList.remove('disabled');\r\n            }, 750);\r\n        }\r\n    }, [openedCards])\r\n\r\n    useEffect(() => {\r\n        const cardsArr = setCardsArray();\r\n        const shuffledCards = shuffle(cardsArr);\r\n\r\n        setCards(shuffledCards);\r\n    }, [setCards])\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <header className=\"header\">\r\n                <div className=\"header__container--inner\">\r\n                    <img src={puzzleImg} className=\"puzzle-img--mini\" alt=\"Happy puzzle\"></img>\r\n                    <h1 className=\"header__title--mini\">Mmg</h1>\r\n                </div>\r\n                <div className=\"header__container--inner\">\r\n                    <Link onClick={() => {\r\n                        const isConfirmed = window.confirm(`Are you sure that you want to finish a current game and return?\\n\\nNOTE: Your current score will not be saved.`);\r\n                        if (isConfirmed) {\r\n                            history.push('/welcome');\r\n                        }\r\n                    }} className=\"header__link\">\r\n                        <img src={backImg} className=\"header-icon\" alt=\"User icon\"></img>\r\n                        <p className=\"header__link--title\">New Game</p>\r\n                    </Link>\r\n                    <Link onClick={() => {\r\n                        const isConfirmed = window.confirm(`Are you sure that you want to finish a current game?\\n\\nNOTE: Your current score will not be saved.`);\r\n                        if (isConfirmed) {\r\n                            history.push('/profile');\r\n                        }\r\n                    }} className=\"header__link\">\r\n                        <img src={userImg} className=\"header-icon\" alt=\"User icon\"></img>\r\n                        <p className=\"header__link--title\">Profile</p>\r\n                    </Link>\r\n                    <Link onClick={() => {\r\n                        const isConfirmed = window.confirm(`Are you sure that you want to finish the game and log out?\\n\\nNOTE: Your current score will not be saved.`);\r\n                        if (isConfirmed) {\r\n                            history.push('/welcome');\r\n                            localStorage.clear();\r\n                        }\r\n                    }} className=\"header__link\">\r\n                        <img src={logOutImg} className=\"header-icon\" alt=\"Log out icon\"></img>\r\n                        <p className=\"header__link--title\">Log out</p>\r\n                    </Link>\r\n                </div>\r\n            </header>\r\n\r\n            <div className={`${difficulty === 'easy' ? \"game__container--easy\" :\r\n                difficulty === 'medium' ? \"game__container--medium\" : \"game__container--hard \"}`} ref={gameContainer}>\r\n                <div className=\"game__info-container\">\r\n                    <div className=\"game__info-container--inner\">\r\n                        <p className=\"game__info-title\">Time</p>\r\n                        <div className=\"game__info-handler\">{time.min >= 10 ? time.min : \"0\" + time.min}:\r\n                        {time.sec >= 10 ? time.sec : \"0\" + time.sec}</div>\r\n                    </div>\r\n                    {difficulty === \"hard\" ? <button button className=\"game__restart-btn\" style={{ marginBottom: '0' }} onClick={onRestartClick}>Restart</button> : \"\"}\r\n                    <div className=\"game__info-container--inner\">\r\n                        <p className=\"game__info-title\">Steps</p>\r\n                        <div className=\"game__info-handler\">{steps}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={`${difficulty === 'easy' ? \"game__main-container--easy\" :\r\n                    difficulty === 'medium' ? \"game__main-container--medium\" : \"game__main-container--hard\"}`}>\r\n                    {cards.map(({ id, name, path }, index) => {\r\n                        let isCardFlipped = false;\r\n\r\n                        if (openedCards.includes(index)) {\r\n                            isCardFlipped = true;\r\n                        }\r\n\r\n\r\n                        if (matchedCards.includes(id)) {\r\n                            isCardFlipped = true;\r\n                        }\r\n\r\n                        return (\r\n                            <div className={`game__card ${isCardFlipped ? 'game__card-flipped disabled' : \"\"} \r\n                            ${matchedCards.includes(id) ? 'matched' : \"\"}`} key={index}\r\n                                onClick={() => onCardFlipHandler(index)} ref={card}>\r\n                                <div className=\"game__card-back game__card-face\">\r\n                                    <img className=\"game__card-corner game__card-corner--top-left\" src={cornerImg} alt=\"Corner icon\"></img>\r\n                                    <img className=\"game__card-corner game__card-corner--top-right\" src={cornerImg} alt=\"Corner icon\"></img>\r\n                                    <img className=\"game__card-corner game__card-corner--bottom-left\" src={cornerImg} alt=\"Corner icon\"></img>\r\n                                    <img className=\"game__card-corner game__card-corner--bottom-right\" src={cornerImg} alt=\"Corner icon\"></img>\r\n                                    <img className=\"game__card-question\" src={questionImg} alt=\"Question icon\"></img>\r\n                                </div>\r\n                                <div className=\"game__card-front game__card-face\">\r\n                                    <img className=\"game__card-corner game__card-corner--top-left\" src={cornerImg} alt=\"Corner icon\"></img>\r\n                                    <img className=\"game__card-corner game__card-corner--top-right\" src={cornerImg} alt=\"Corner icon\"></img>\r\n                                    <img className=\"game__card-corner game__card-corner--bottom-left\" src={cornerImg} alt=\"Corner icon\"></img>\r\n                                    <img className=\"game__card-corner game__card-corner--bottom-right\" src={cornerImg} alt=\"Corner icon\"></img>\r\n                                    <img className=\"game__card-front-image\" src={path} alt={`${name} icon`}></img>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                {difficulty === \"hard\" ? \"\" : <button button className=\"game__restart-btn\" onClick={onRestartClick}>Restart</button>}\r\n            </div>\r\n        </div >\r\n    )\r\n}","D:\\work_tms\\JS-React\\match-match-game\\src\\components\\ProfilePg.jsx",["60"],"import React, { useEffect } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport puzzleImg from \"../img/puzzle.png\";\r\nimport backImg from \"../img/back-arrow.png\";\r\nimport logOutImg from \"../img/log-out.png\";\r\nimport userImg from \"../img/user.png\";\r\nimport \"../style/ProfilePg.css\";\r\nimport \"../App.css\";\r\n\r\nexport default function ProfilePg(props) {\r\n    const { firstName, lastName, email } = JSON.parse(localStorage.getItem('profileInfo'));\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            <header className=\"header\">\r\n                <div className=\"header__container--inner\">\r\n                    <img src={puzzleImg} className=\"puzzle-img--mini\" alt=\"Happy puzzle\"></img>\r\n                    <h1 className=\"header__title--mini\">Mmg</h1>\r\n                </div>\r\n                <div className=\"header__container--inner\">\r\n                    <Link to=\"/welcome\" className=\"header__link\">\r\n                        <img src={backImg} className=\"header-icon\" alt=\"User icon\"></img>\r\n                        <p className=\"header__link--title\">Welcome</p>\r\n                    </Link>\r\n                    <Link to=\"/welcome\" onClick={() => localStorage.clear()} className=\"header__link\">\r\n                        <img src={logOutImg} className=\"header-icon\" alt=\"Log out icon\"></img>\r\n                        <p className=\"header__link--title\">Log out</p>\r\n                    </Link>\r\n                </div>\r\n            </header>\r\n\r\n            <div className=\"profile__personal-info\">\r\n                <img src={userImg} className=\"profile__user-icon--large\" alt=\"User icon\"></img>\r\n                <h1 className=\"profile__user-name\">{firstName} {lastName}</h1>\r\n                <p className=\"profile__email\"><span>email:&#32;</span>{email}</p>\r\n            </div>\r\n            <div className=\"profile__records\">\r\n                <h2 className=\"profile__records-title\">Details:</h2>\r\n                <div className=\"profile__records--inner\">\r\n                    <p className=\"profile__records-paragraph\">Last game's difficulty:&#32;<span>?</span></p>\r\n                    <p className=\"profile__records-paragraph\">Last game's duration:&#32;<span>?</span></p>\r\n                    <p className=\"profile__records-paragraph\">Last game's steps:&#32;<span>?</span></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\work_tms\\JS-React\\match-match-game\\src\\components\\RecordsPg.jsx",[],"D:\\work_tms\\JS-React\\match-match-game\\src\\components\\CongratulationPg.jsx",["61"],"import React, { useEffect } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport puzzleImg from \"../img/puzzle.png\";\r\nimport \"../style/CongratulationPg.css\";\r\nimport \"../App.css\";\r\n\r\nexport default function CongratulationPg(props) {\r\n    const finishedGames = JSON.parse(localStorage.getItem(\"finishedGamesInfo\"));\r\n    const { firstName, difficulty, duration, steps } = finishedGames[finishedGames.length - 1];\r\n\r\n    const history = useHistory();\r\n\r\n    const onNewGameClickGandler = () => {\r\n        history.push('/welcome');\r\n    }\r\n\r\n    return (\r\n        <div className=\"congratulation\">\r\n            <div className=\"congratulations__image-container\">\r\n                <img className=\"congratulations__puzzle\" alt=\"Puzzle\" src={puzzleImg}></img>\r\n            </div>\r\n            <h1 className=\"congratulation__title\">Congratulations, {firstName}!</h1>\r\n            <h2 className=\"congratulation__subtitle\">You completed the game on {difficulty} level!</h2>\r\n            <div className=\"congratulation__results-container\">\r\n                <p className=\"congratulation__results-title\">Your result:</p>\r\n                <span className=\"congratulation__results-stat\">Time: {duration.min >= 10 ? duration.min : \"0\" + duration.min}:\r\n                        {duration.sec >= 10 ? duration.sec : \"0\" + duration.sec}</span>\r\n                <span className=\"congratulation__results-stat\">Steps: {steps}</span>\r\n            </div>\r\n            <button className=\"congratulation__new-game-btn\" onClick={onNewGameClickGandler}>New Game</button>\r\n        </div>\r\n    )\r\n}","D:\\work_tms\\JS-React\\match-match-game\\src\\validations\\profileValidation.js",[],"D:\\work_tms\\JS-React\\match-match-game\\src\\arrsOfImages\\countries.js",[],"D:\\work_tms\\JS-React\\match-match-game\\src\\arrsOfImages\\balls.js",[],"D:\\work_tms\\JS-React\\match-match-game\\src\\arrsOfImages\\food.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},{"ruleId":"66","severity":1,"message":"70","line":1,"column":28,"nodeType":"68","messageId":"69","endLine":1,"endColumn":38},{"ruleId":"66","severity":1,"message":"71","line":7,"column":8,"nodeType":"68","messageId":"69","endLine":7,"endColumn":17},{"ruleId":"72","severity":1,"message":"73","line":47,"column":8,"nodeType":"74","endLine":47,"endColumn":17,"suggestions":"75"},{"ruleId":"72","severity":1,"message":"76","line":89,"column":28,"nodeType":"77","endLine":89,"endColumn":29},{"ruleId":"72","severity":1,"message":"78","line":152,"column":8,"nodeType":"74","endLine":152,"endColumn":21,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"80","line":159,"column":8,"nodeType":"74","endLine":159,"endColumn":18,"suggestions":"81"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'RecordsPg' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setCardsArray'. Either include it or remove the dependency array.","ArrayExpression",["84"],"Assignments to the 'secCount' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has missing dependencies: 'cards.length', 'difficulty', 'history', 'matchedCards', 'setCardsArray', 'steps', 'stopTimer', and 'time'. Either include them or remove the dependency array. You can also do a functional update 'setMatchedCards(m => ...)' if you only need 'matchedCards' in the 'setMatchedCards' call.",["85"],"React Hook useEffect has a missing dependency: 'setCardsArray'. Either include it or remove the dependency array.",["86"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [setCardsArray]",{"range":"93","text":"94"},"Update the dependencies array to be: [cards.length, difficulty, history, matchedCards, openedCards, setCardsArray, steps, stopTimer, time]",{"range":"95","text":"96"},"Update the dependencies array to be: [setCards, setCardsArray]",{"range":"97","text":"98"},[1920,1929],"[setCardsArray]",[5671,5684],"[cards.length, difficulty, history, matchedCards, openedCards, setCardsArray, steps, stopTimer, time]",[5848,5858],"[setCards, setCardsArray]"]